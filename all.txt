BASIC:
#include<stdio.h>
#include<conio.h>
#include<math.h>

int fround(float x)

{

  int a;

  x=x+0.5;

  a=x;

  return(a);

}

void main()

{

  float effort,time,staff,productivity;

  float table[3][4]={2.4,1.05,2.5,0.38,3.0,1.12,2.5,0.35,3.6,1.20,2.5,0.32};

  int size,model;

  char mode[][15]={"Organic","Semi-Detached","Embedded"};

  clrscr();

  printf("\nEnter size of project (in KLOC) : ");

  scanf("%d",&size);

  if(size>=2 && size<=50)

    model=0;     //organic

  else if(size>50 && size<=300)

    model=1;     //semi-detached

  else if(size>300)

    model=2;     //embedded

  printf("\nThe mode is %s\n",mode[model]);

  effort=table[model][0]*pow(size,table[model][1]);

  time=table[model][2]*pow(effort,table[model][3]);

  staff=effort/time;

  productivity=size/effort;

  printf("\nEffort = %f Person-Month",effort);

  printf("\n\nDevelopment Time = %f Months",time);

  printf("\n\nAverage Staff Required = %d Persons",fround(staff));

  printf("\n\nProductivity = %f KLOC/Person-Month",productivity);

getch();
}
INTERMIDIATE:
#include<stdio.h>
#include<conio.h>
#include<math.h>

int fround(float x)
{
  int a;
  x=x+0.5;
  a=x;
  return(a);
}

void main()
{
  float table[3][4]={3.2,1.05,2.5,0.38,3.0,1.12,2.5,0.35,2.8,1.20,2.5,0.32};
  int i,j,size,model,rating;
  char mode[][15]={"Organic","Semi-Detached","Embedded"};
  char driver[15][6]={"RELY","DATA","CPLX","TIME","STOR","VIRT","TURN","ACAP","AEXP","PCAP",
  "VEXP","LEXP","MODP","TOOL","SCED"};

  float effort,EAF,a,time,staff,productivity;
  float costdrivers[15][6]={

                {0.75,0.88,1,1.15,1.40,-1},

                {-1,0.94,1,1.08,1.16,-1},

                {0.70,0.85,1,15,1.30,1.65},

                {-1,-1,1,1.11,1.30,1.66},

                {-1,-1,1,1.06,1.21,1.56},

                {-1,0.87,1,1.15,1.30,-1},

                {-1,0.87,1,1.07,1.15,-1},

                {1.46,1.19,1,0.86,0.71,-1},

                {1.29,1.13,1.00,0.91,0.82,-1},

                {1.42,1.17,1,0.86,0.70,-1},

                {1.21,1.10,1,0.90,-1,-1},

                {1.14,1.07,1,0.95,-1,-1},

                {1.24,1.10,1.00,0.91,0.82,-1},

                {1.24,1.10,1,0.91,0.83,-1},

                {1.23,1.08,1,1.04,1.10,-1}

                };

  clrscr();

  printf("\nEnter the size of project : ");

  scanf("%d",&size);

  if(size>=2 && size<=50)

    model=0;

  else if(size>50 && size<=300)

    model=1;

  else if(size>300)

    model=2;

  printf("\nMode = %s",mode[model]);

  EAF=1;

  for(i=0;i<15;i++)

  {

    do

    {

    printf("\nRate cost driver %s on scale of 0-5 : ",driver[i]);

    printf("\n0-Very Low\t1-Low\t2-Nominal\t3-High\t4-Very High\t5-Extra High\n");

    scanf("%d",&rating);

    a=costdrivers[i][rating];

    if(a==-1)

    {

       printf("\nNo value exist for this rating..Enter another rating...\n");

    }

    }while(a==-1);

    EAF=EAF*a;

  }

  printf("\nEAF = %f",EAF);

  effort=(table[model][0]*pow(size,table[model][1])) * EAF;

  time=table[model][2]*pow(effort,table[model][3]);

  staff=effort/time;

  productivity=size/effort;

  printf("\n\nEffort = %f Person-Month",effort);

  printf("\nDevelopment Time = %f Months",time);

  printf("\nAverage Staff Required = %d Persons",fround(staff));

  printf("\nProductivity = %f KLOC/Person-Month",productivity);

getch();
}
DETAILED:
#include<stdio.h>
#include<conio.h>
#include<math.h>

int fround(float x)
{
  int a;
  x=x+0.5;
  a=x;
  return(a);
}

void main()
{
  float table[3][4]={3.2,1.05,2.5,0.38,3.0,1.12,2.5,0.35,2.8,1.20,2.5,0.32};
  int i,j,size,model,rating,S;
  char mode[][15]={"Organic","Semi-Detached","Embedded"};
  char driver[15][6]={"RELY","DATA","CPLX","TIME","STOR","VIRT","TURN","ACAP","AEXP","PCAP",
  "VEXP","LEXP","MODP","TOOL","SCED"};
  float effort,EAF,a,time,staff,productivity;
  float costdrivers[15][6]={
                {0.75,0.88,1,1.15,1.40,-1},
                {-1,0.94,1,1.08,1.16,-1},
                {0.70,0.85,1,1.15,1.30,1.65},

                {-1,-1,1,1.11,1.30,1.66},
                {-1,-1,1,1.06,1.21,1.56},
                {-1,0.87,1,1.15,1.30,-1},
                {-1,0.87,1,1.07,1.15,-1},

                {1.46,1.19,1,0.86,0.71,-1},
                {1.29,1.13,1.00,0.91,0.82,-1},
                {1.42,1.17,1,0.86,0.70,-1},
                {1.21,1.10,1,0.90,-1,-1},
                {1.14,1.07,1,0.95,-1,-1},

                {1.24,1.10,1.00,0.91,0.82,-1},
                {1.24,1.10,1,0.91,0.83,-1},
                {1.23,1.08,1,1.04,1.10,-1}
                };

  float mp[6][5]={
            {0.06,0.16,0.26,0.42,0.16},
            {0.06,0.16,0.24,0.38,0.22},
            {0.07,0.17,0.25,0.33,0.25},
            {0.07,0.17,0.24,0.31,0.28},
            {0.08,0.18,0.25,0.26,0.31},
            {0.08,0.18,0.24,0.24,0.34}
          };
  float tp[6][5]={
            {0.10,0.19,0.24,0.39,0.18},
            {0.12,0.19,0.21,0.34,0.26},
            {0.20,0.26,0.21,0.27,0.26},
            {0.22,0.27,0.19,0.25,0.29},
            {0.36,0.36,0.18,0.18,0.28},
            {0.40,0.38,0.16,0.16,0.30}
          };

  char phases[5][30]={"Planning and Requirements","System Design","Detail Design","Module Code and Test","Integration and Test"};
  clrscr();
  printf("\nEnter the size of project : ");
  scanf("%d",&size);
  if(size>=2 && size<=50)
    model=0;
  else if(size>50 && size<=300)
    model=1;
  else if(size>300)
    model=2;
  printf("\nMode = %s",mode[model]);
  EAF=1;
  for(i=0;i<15;i++)
  {
    do
    {
    printf("\nRate cost driver %s on scale of 0-5 : ",driver[i]);
    printf("\n0-Very Low\t1-Low\t2-Nominal\t3-High\t4-Very High\t5-Extra High\n");
    scanf("%d",&rating);
    a=costdrivers[i][rating];
    if(a==-1)
    {
       printf("\nNo value exist for this rating..Enter another rating...\n");
    }
    }while(a==-1);
    EAF=EAF*a;
  }
  printf("\nEAF = %f",EAF);

  effort=(table[model][0]*pow(size,table[model][1])) * EAF;
  time=table[model][2]*pow(effort,table[model][3]);
  staff=effort/time;
  productivity=size/effort;

  printf("\n\nEffort = %f Person-Month",effort);
  printf("\nDevelopment Time = %f Months",time);
  printf("\nAverage Staff Required = %d Persons",fround(staff));
  printf("\nProductivity = %f KLOC/Person-Month",productivity);
  printf("\n\n");

  if(model==0)
  {
    printf("\nEnter Ogranic - Small(0) or Medium(1) : ");
    scanf("%d",&S);
  }
  else if(model==1)
  {
    printf("\nEnter Semi-Detached - Medium(2) or Large(3) : ");
    scanf("%d",&S);
  }
  else if(model==2)
  {
    printf("\nEnter Embedded - Large(4) or Extra Large(5) : ");
    scanf("%d",&S);
  }
  printf("\n\nPhase-wise Distribution of Effort is :\n\n");
  for(i=0;i<5;i++)
  {
     printf("\n%s Phase  =  ",phases[i]);
     printf("%f",effort*mp[S][i]);
  }
  printf("\n\nPhase-wise Distribution of Development Time is :\n\n");
  for(i=0;i<5;i++)
  {
     printf("\n%s Phase  =  ",phases[i]);
     printf("%f",time*tp[S][i]);
  }
getch();
}

COCOMO-2:
//C program to calculate effort and productivity in stage-1 of cocomo-2 model//

#include<stdio.h>
#include<conio.h>
#include<math.h>

void main()
{
  int no_of_screens,no_of_reports;
  int screen[4],report[4];
  int CPLX_table[3][3]={
                {0,0,1},     //0-Small
                {0,1,2},     //1-Medium
                {1,2,2}      //2-Difficult
              };
  int weight_table[3][3]={
                {1,2,3},
                {2,5,8},
                {-1,-1,10}
              };
  int col,r_row,s_row,s_CPLX,r_CPLX;
  int rating,OP,reuse;
  float NOP,effort;
  int PROD[5]={4,7,13,25,50};

  clrscr();

  printf("\nEnter number of Screens : ");
  scanf("%d",&screen[0]);

  printf("\nEnter number of Screen Views : ");
  scanf("%d",&screen[1]);

  printf("\nEnter number of clients and servers : ");
  scanf("%d %d",&screen[2],&screen[3]);

  printf("\nEnter number of Reports : ");
  scanf("%d",&report[0]);

  printf("\nEnter number of Report Sections : ");
  scanf("%d",&report[1]);

  printf("\nEnter number of clients and servers : ");
  scanf("%d %d",&report[2],&report[3]);


  if(screen[1]<3)
    s_row=0;
  else if(screen[1]>=3 && screen[1]<=7)
    s_row=1;
  else if(screen[1]>=8)
    s_row=2;

  if(report[1]==0 || report[1]==1)
    r_row=0;
  else if(report[1]==2 || report[1]==3)
    r_row=1;
  else if(report[1]>=4)
    r_row=2;

    if(screen[2]<2 && screen[3]<3)
      col=0;
    else if((screen[2]>=2 && screen[2]<=3) && (screen[3]>=3 && screen[3]<=5))
      col=1;
    else if(screen[2]>3 && screen[3]>5)
      col=2;

  s_CPLX=CPLX_table[s_row][col];
  r_CPLX=CPLX_table[r_row][col];

  OP=(screen[0]*weight_table[0][s_CPLX])+(report[0]*weight_table[1][r_CPLX]);
  printf("\nObject Point = %d",OP);
  printf("\nEnter Reuse % : ");
  scanf("%d",&reuse);
  NOP=(OP*(100-reuse))/100.0;
  printf("\nNew Object Point (NOP) = %f",NOP);
  printf("\nRate Programmer's Capability and Experience on Scale of 0-4 :\n");
  printf("\n0 - Very Low\n1 - Low\n2 - Nominal\n3 - High\n4 - Very High\n\n");
  scanf("%d",&rating);
  printf("\nProductivity = %d",PROD[rating]);
  effort=NOP/PROD[rating];
  printf("\n\nEffort = NOP/Productivity");
  printf("\nEffort = %f",effort);
getch();
}
PREDICATE_NODE:
#include<stdio.h>
#include<conio.h>
#define STMNT fscanf(fp,"%c",&ch)
void main()
{
  FILE *fp;
  int num_of_prednodes=0,cases=-1;
  char ch;

  clrscr();

  fp=fopen("input.txt","r");

  while(fscanf(fp,"%c",&ch)!=EOF)
  {
     if(ch=='i')
     {
       STMNT;
       if(ch=='f')
       {
      num_of_prednodes++;
       }
     }
     else if(ch=='w')
     {
    STMNT;
    if(ch=='h')
    {
      STMNT;
      if(ch=='i')
      {
        STMNT;
        if(ch=='l')
        {
          STMNT;
          if(ch=='e')
          {
           num_of_prednodes++;
          }
        }
      }
    }
      }
      else if(ch=='f')
      {
    STMNT;
    if(ch=='o')
    {
      STMNT;
      if(ch=='r')
      {
        num_of_prednodes++;
      }
    }
      }
      else if(ch=='c')
      {
    STMNT;
    if(ch=='a')
    {
     STMNT;
     if(ch=='s')
     {
      STMNT;
      if(ch=='e')
      {
        cases++;
      }
    }
       }
      }
      else if(ch=='d')
      {
    STMNT;
    if(ch=='e')
    {
     STMNT;
     if(ch=='f')
     {
      STMNT;
      if(ch=='a')
      {
        cases++;
        if(ch=='u')
        {
         STMNT;
          if(ch=='l')
          {
           STMNT;
           if(ch=='t')
           {
         cases++;
           }
         }
       }
     }
       }
     }
    }

  }

fclose(fp);

if(cases<=1)
{
  num_of_prednodes+=cases;

  printf("\nCyclometic Complexity is = Number of predicate nodes + 1");
  printf("\n\t\t\t = %d + 1 = %d",num_of_prednodes,num_of_prednodes+1);
}
else
{
  printf("\nCyclometic Complexity using predicate nodes cannot be applied to this graph...");
}

getch();
}
NO_OF_REGION:
 C code to calculate Cyclometic Complexity using number of region
#include<stdio.h>
#include<conio.h>
#define STMNT fscanf(fp,"%c",&ch)
void main()
{
  FILE *fp;
  int num_of_regions=1,cases=-1; //cz 1 universe region
  char ch;

  clrscr();

  fp=fopen("input.txt","r");

  while(fscanf(fp,"%c",&ch)!=EOF)
  {
     if(ch=='i')
     {
       STMNT;
       if(ch=='f')
       {
      num_of_regions++;
       }
     }
     else if(ch=='w')
     {
    STMNT;
    if(ch=='h')
    {
      STMNT;
      if(ch=='i')
      {
        STMNT;
        if(ch=='l')
        {
          STMNT;
          if(ch=='e')
          {
           num_of_regions++;
          }
        }
      }
    }
      }
      else if(ch=='f')
      {
    STMNT;
    if(ch=='o')
    {
      STMNT;
      if(ch=='r')
      {
        num_of_regions++;
      }
    }
      }
      else if(ch=='c')
      {
    STMNT;
    if(ch=='a')
    {
     STMNT;
     if(ch=='s')
     {
      STMNT;
      if(ch=='e')
      {
        cases++;
      }
    }
       }
      }
      else if(ch=='d')
      {
    STMNT;
    if(ch=='e')
    {
     STMNT;
     if(ch=='f')
     {
      STMNT;
      if(ch=='a')
      {
        cases++;
        if(ch=='u')
        {
         STMNT;
          if(ch=='l')
          {
           STMNT;
           if(ch=='t')
           {
         cases++;
           }
         }
       }
     }
       }
     }
    }


}

if(cases!=-1)
  num_of_regions+=cases;

fclose(fp);

printf("\nCyclometic Complexity is = Number of regions");
printf("\n\t\t\t = %d",num_of_regions);

getch();
}
FLOW_GRAPH_SE:
 C code to calculate cyclomatic complexity using verteces,edges and connected components
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define MAX 10

void main()
{
  FILE *fp;
  int row,col,i,j,edges,nodes;
  char ch;
  int mat[MAX][MAX];

  clrscr();

  fp=fopen("matrix.txt","r");

  row=col=0;

  while(fscanf(fp,"%c",&ch)!=EOF)
  {
     if(ch==' ')
       col++;
     else if(ch=='\n')
     {
       row++;
       col=0;
     }
     else
       mat[row][col]=ch-48;
   }

fclose(fp);

printf("\nThe given adjacency matrix is : \n");

for(i=0;i<=row;i++)
{
  for(j=0;j<=col;j++)
    printf("%d\t",mat[i][j]);
  printf("\n");
}

nodes=row+1;
printf("\nNumber of nodes = %d",nodes);

edges=0;

for(i=0;i<=row;i++)
{
  for(j=0;j<=col;j++)
  {
    if(mat[i][j]==1)
      edges++;
  }
}
printf("\nNumber of edges = %d",edges);
printf("\n\nCyclometic Complexity of graph  = edges-nodes+2p\n");
printf("\t\t\t\t= %d - %d + 2",edges,nodes);
printf("\n\t\t\t\t= %d",edges-nodes+2);


getch();
}
FUNCTION_POINT:
 C code to Calculate Unadjusted Function Point(UFP) and Adjusted Function Point(FP)
#include<stdio.h>
#include<conio.h>
int fround(float x)
{
  int a;
  x=x+0.5;
  a=x;
  return(a);
}

void main()
{
  int weights[5][3]={3,4,6,4,5,6,3,4,6,7,10,15,5,7,10};
  int UFP=0,F=0,rating,i,j;
  char func_units[][30]={"External Inputs","External Outputs","External Enquiries","Internal Logical Files","External Interface Files"};
  char complexity[3][10]={"low","average","high"};
  int input[5][3];
  float FP,CAF;

  clrscr();

  for(i=0;i<5;i++)
  {
    for(j=0;j<3;j++)
    {
      printf("\nEnter number of %s %s : ",complexity[j],func_units[i]);
      scanf("%d",&input[i][j]);
    }
  }

  //calculating UFP

  for(i=0;i<5;i++)
  {
    for(j=0;j<3;j++)
    {
      UFP=UFP+(input[i][j]*weights[i][j]);
    }
  }

  printf("\nUnadjusted Function Point(UFP) = %d",UFP);

  printf("\nEnter Rating of 14 factors on the scale of 0-5 :\n");
  printf("\n 0 - No Influence");
  printf("\n 1 - Incidental");
  printf("\n 2 - Moderate");
  printf("\n 3 - Average");
  printf("\n 4 - Significant");
  printf("\n 5 - Essential");

  printf("\n");

  for(i=0;i<14;i++)
  {
    scanf("%d",&rating);
    F=F+rating;
  }

  CAF=0.65+0.01*F;

  FP=UFP*CAF;

  printf("\nAdjusted Function Point = %f",FP);
  printf("\nOR FP = %d",fround(FP));

getch();
}
